#!/usr/bin/env python3
import os, atexit, signal, threading, subprocess
from flask import Flask, render_template_string
import RPi.GPIO as GPIO
from PIL import Image as PILImage, ImageDraw, ImageFont
from luma.core.interface.serial import spi
from luma.lcd.device import st7735

# ----------------- GPIO pins -----------------
PIN_BL, PIN_DC, PIN_RST = 24, 25, 27
PIN_KEY1, PIN_KEY2, PIN_KEY3 = 21, 20, 16
PIN_JOY_UP, PIN_JOY_DOWN, PIN_JOY_LEFT, PIN_JOY_RIGHT, PIN_JOY_PRESS = 6, 19, 5, 26, 13
LCD_W, LCD_H = 128, 128

# ----------------- State -----------------
menu_items, menu_index = ["Timelapse", "Wigglegram", "Hotspot: Off"], 0
hotspot_on, AP_NAME = False, "PiCam-AP"
_btn_stop = threading.Event()

# ----------------- LCD helpers -----------------
GPIO.setmode(GPIO.BCM); GPIO.setwarnings(False)
GPIO.setup(PIN_BL, GPIO.OUT, initial=GPIO.HIGH)
for p in [PIN_KEY1,PIN_KEY2,PIN_KEY3,PIN_JOY_UP,PIN_JOY_DOWN,PIN_JOY_LEFT,PIN_JOY_RIGHT,PIN_JOY_PRESS]:
    GPIO.setup(p, GPIO.IN, pull_up_down=GPIO.PUD_UP)
_font = ImageFont.load_default(); _lcd=None
def _lcd_init():
    global _lcd
    try:
        serial = spi(port=0, device=0, gpio_DC=PIN_DC, gpio_RST=PIN_RST, bus_speed_hz=16000000)
        _lcd = st7735(serial_interface=serial,width=LCD_W,height=LCD_H,rotate=0,bgr=True,h_offset=2,v_offset=3)
    except Exception as e: print("[WARN] LCD init failed:",e)
def lcd_display_image(img):
    if _lcd: _lcd.display(img.resize((LCD_W,LCD_H)).convert("RGB"))
def lcd_text(msg):
    safe = msg.encode("ascii","replace").decode()
    img=PILImage.new('RGB',(LCD_W,LCD_H),(0,0,0)); d=ImageDraw.Draw(img)
    d.multiline_text((4,4),safe,fill=(255,255,255),font=_font,spacing=2); lcd_display_image(img)

# ----------------- Robust AP state detection -----------------
def ap_is_active():
    """Return True if wlan0 is in AP mode or the PiCam-AP connection is active."""
    # Prefer nmcli device view (shows 'connected (AP)' when hotspot is running)
    line = subprocess.getoutput("nmcli -t -f DEVICE,STATE,CONNECTION dev status | grep '^wlan0:' || true")
    if line:
        parts = (line.split(":") + ["", "", ""])[:3]
        dev, state, conn = parts[0], parts[1], parts[2]
        print(f"[DEBUG] nmcli dev status: dev={dev}, state={state}, conn={conn}")
        if "AP" in state or conn == AP_NAME:
            return True
    # Fallback to iw: shows 'type AP'
    iw_type = subprocess.getoutput("iw dev wlan0 info | awk '/type/ {print $2}'").strip()
    print(f"[DEBUG] iw dev wlan0 info type={iw_type or 'N/A'}")
    if iw_type.upper() == "AP":
        return True
    return False

# ----------------- Hotspot toggle -----------------
def hotspot_toggle():
    """Toggle AP on/off. If 'down' is stubborn, also disconnect device."""
    global hotspot_on, menu_items
    print("[DEBUG] Hotspot toggle pressed.")
    active_before = ap_is_active()
    print(f"[DEBUG] ap_is_active() before toggle = {active_before}")

    if active_before:
        print("[DEBUG] AP active → nmcli connection down PiCam-AP")
        r = subprocess.run(["sudo","/usr/bin/nmcli","connection","down",AP_NAME],
                           capture_output=True,text=True)
        print("[DEBUG] down rc:", r.returncode)
        print("[DEBUG] down stdout:", r.stdout.strip())
        print("[DEBUG] down stderr:", r.stderr.strip())
        # Re-check state; if still AP, force device disconnect
        if ap_is_active():
            print("[DEBUG] Still AP after 'down' → nmcli device disconnect wlan0")
            r2 = subprocess.run(["sudo","/usr/bin/nmcli","device","disconnect","wlan0"],
                                capture_output=True,text=True)
            print("[DEBUG] dev disconnect rc:", r2.returncode)
            print("[DEBUG] dev disconnect stdout:", r2.stdout.strip())
            print("[DEBUG] dev disconnect stderr:", r2.stderr.strip())
        # Final state
        hotspot_on = ap_is_active()  # should now be False
        lcd_text("Hotspot Off" if not hotspot_on else "AP still active")
    else:
        print("[DEBUG] AP NOT active → bring it up")
        # Drop any client Wi-Fi on wlan0 so AP can claim the device
        out = subprocess.getoutput("nmcli -t -f NAME,TYPE,DEVICE,ACTIVE connection show --active")
        for line in out.splitlines():
            n,t,dev,act = (line.split(":")+["","","",""])[:4]
            if t=="wifi" and dev=="wlan0" and act=="yes" and n!=AP_NAME:
                print(f"[DEBUG] disconnecting client wifi: {n}")
                subprocess.run(["nmcli","connection","down",n])
        r = subprocess.run(["sudo","/usr/bin/nmcli","connection","up",AP_NAME],
                           capture_output=True,text=True)
        print("[DEBUG] up rc:", r.returncode)
        print("[DEBUG] up stdout:", r.stdout.strip())
        print("[DEBUG] up stderr:", r.stderr.strip())
        hotspot_on = ap_is_active()
        lcd_text("Hotspot On\nSSID: PiCam-AP" if hotspot_on else "AP on failed")

    menu_items[2] = f"Hotspot: {'On' if hotspot_on else 'Off'}"
    draw_menu()
    print(f"[DEBUG] ap_is_active() after toggle = {hotspot_on}")

# ----------------- Menu -----------------
def draw_menu():
    img=PILImage.new("RGB",(LCD_W,LCD_H),(0,0,0)); d=ImageDraw.Draw(img); y=14
    for i,item in enumerate(menu_items):
        pref="> " if i==menu_index else "  "; col=(255,255,0) if i==menu_index else (200,200,200)
        d.text((6,y),pref+item,font=_font,fill=col); y+=20
    lcd_display_image(img)
def handle_select():
    if menu_index==0: lcd_text("Starting\nTimelapse...")   # stub
    elif menu_index==1: lcd_text("Wigglegram\n(not yet)")  # stub
    elif menu_index==2: lcd_text("Toggling\nHotspot..."); hotspot_toggle()
def _menu_buttons_loop():
    global menu_index
    last={p:1 for p in [PIN_KEY1,PIN_KEY2,PIN_KEY3,PIN_JOY_UP,PIN_JOY_DOWN,PIN_JOY_LEFT,PIN_JOY_RIGHT,PIN_JOY_PRESS]}
    draw_menu()
    while not _btn_stop.is_set():
        for pin in last:
            val=GPIO.input(pin)
            if val==0 and last[pin]==1:
                if pin==PIN_JOY_UP: menu_index=(menu_index-1)%len(menu_items); draw_menu()
                elif pin==PIN_JOY_DOWN: menu_index=(menu_index+1)%len(menu_items); draw_menu()
                elif pin in (PIN_KEY1,PIN_JOY_PRESS): handle_select()
            last[pin]=val
        _btn_stop.wait(0.05)
def start_menu():
    global hotspot_on
    hotspot_on = ap_is_active()
    menu_items[2] = f"Hotspot: {'On' if hotspot_on else 'Off'}"
    _btn_stop.clear()
    threading.Thread(target=_menu_buttons_loop,daemon=True).start()

# ----------------- Flask -----------------
app=Flask(__name__)
@app.route("/")
def index(): return render_template_string("<h2>Pi Timelapse</h2><p>Menu driven</p>")

# ----------------- Cleanup -----------------
def _cleanup(): _btn_stop.set(); GPIO.cleanup()
@atexit.register
def _on_exit(): _cleanup()
def _handle_sigterm(s,f): _cleanup(); exit(0)
signal.signal(signal.SIGTERM,_handle_sigterm)

if __name__=="__main__":
    _lcd_init(); start_menu()
    app.run(host="0.0.0.0",port=5000)
